// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.getRefreshTokenStmt, err = db.PrepareContext(ctx, getRefreshToken); err != nil {
		return nil, fmt.Errorf("error preparing query GetRefreshToken: %w", err)
	}
	if q.getRefreshTokenByIdStmt, err = db.PrepareContext(ctx, getRefreshTokenById); err != nil {
		return nil, fmt.Errorf("error preparing query GetRefreshTokenById: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByIdStmt, err = db.PrepareContext(ctx, getUserById); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserById: %w", err)
	}
	if q.insertRefreshTokenStmt, err = db.PrepareContext(ctx, insertRefreshToken); err != nil {
		return nil, fmt.Errorf("error preparing query InsertRefreshToken: %w", err)
	}
	if q.invalidateAllTokensForUserStmt, err = db.PrepareContext(ctx, invalidateAllTokensForUser); err != nil {
		return nil, fmt.Errorf("error preparing query InvalidateAllTokensForUser: %w", err)
	}
	if q.invalidateRefreshTokenStmt, err = db.PrepareContext(ctx, invalidateRefreshToken); err != nil {
		return nil, fmt.Errorf("error preparing query InvalidateRefreshToken: %w", err)
	}
	if q.invalidateRefreshTokenByIdStmt, err = db.PrepareContext(ctx, invalidateRefreshTokenById); err != nil {
		return nil, fmt.Errorf("error preparing query InvalidateRefreshTokenById: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.getRefreshTokenStmt != nil {
		if cerr := q.getRefreshTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRefreshTokenStmt: %w", cerr)
		}
	}
	if q.getRefreshTokenByIdStmt != nil {
		if cerr := q.getRefreshTokenByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRefreshTokenByIdStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByIdStmt != nil {
		if cerr := q.getUserByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIdStmt: %w", cerr)
		}
	}
	if q.insertRefreshTokenStmt != nil {
		if cerr := q.insertRefreshTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertRefreshTokenStmt: %w", cerr)
		}
	}
	if q.invalidateAllTokensForUserStmt != nil {
		if cerr := q.invalidateAllTokensForUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing invalidateAllTokensForUserStmt: %w", cerr)
		}
	}
	if q.invalidateRefreshTokenStmt != nil {
		if cerr := q.invalidateRefreshTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing invalidateRefreshTokenStmt: %w", cerr)
		}
	}
	if q.invalidateRefreshTokenByIdStmt != nil {
		if cerr := q.invalidateRefreshTokenByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing invalidateRefreshTokenByIdStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                             DBTX
	tx                             *sql.Tx
	createUserStmt                 *sql.Stmt
	getRefreshTokenStmt            *sql.Stmt
	getRefreshTokenByIdStmt        *sql.Stmt
	getUserByEmailStmt             *sql.Stmt
	getUserByIdStmt                *sql.Stmt
	insertRefreshTokenStmt         *sql.Stmt
	invalidateAllTokensForUserStmt *sql.Stmt
	invalidateRefreshTokenStmt     *sql.Stmt
	invalidateRefreshTokenByIdStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                             tx,
		tx:                             tx,
		createUserStmt:                 q.createUserStmt,
		getRefreshTokenStmt:            q.getRefreshTokenStmt,
		getRefreshTokenByIdStmt:        q.getRefreshTokenByIdStmt,
		getUserByEmailStmt:             q.getUserByEmailStmt,
		getUserByIdStmt:                q.getUserByIdStmt,
		insertRefreshTokenStmt:         q.insertRefreshTokenStmt,
		invalidateAllTokensForUserStmt: q.invalidateAllTokensForUserStmt,
		invalidateRefreshTokenStmt:     q.invalidateRefreshTokenStmt,
		invalidateRefreshTokenByIdStmt: q.invalidateRefreshTokenByIdStmt,
	}
}
